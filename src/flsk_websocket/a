#!/usr/bin/env python
# -*- coding: utf-8 -*-
# vim: ts=4 sw=4 et:
"""
flask sockets
links:
	https://news.ycombinator.com/item?id=19277809
	https://chrisostrouchov.com/post/python_sqlite/
	https://medium.com/@mokashitejas/fetch-data-using-json-api-and-insert-into-sqlite3-db-83f25bc49864
	http://timmyreilly.azurewebsites.net/flask-socketio-and-more/
	https://socket.io/docs/emit-cheatsheet/
	https://stackoverflow.com/questions/34581255/python-flask-socketio-send-message-from-thread-not-always-working
	https://github.com/miguelgrinberg/Flask-SocketIO/issues/862
	https://github.com/miguelgrinberg/python-socketio/issues/16
	https://medium.com/@abhishekchaudhary_28536/building-apps-using-flask-socketio-and-javascript-socket-io-intro-f1e5804ac259
	https://medium.com/@abhishekchaudhary_28536/building-apps-using-flask-socketio-and-javascript-socket-io-part-1-ae448768643
	https://flask-socketio.readthedocs.io/en/latest/
"""
from flask import\
		Flask,\
		render_template,\
		jsonify,\
		request,\
		Response,\
		g
import datetime
import time
import sqlite3
import json
import random
import math
import os
import threading
from flask_socketio import\
		SocketIO,\
		emit
#--------------------------------------------------------------------------------
DATABASE='./db/a.db'
#--------------------------------------------------------------------------------
app=Flask(
	__name__,
	static_url_path="",
	static_folder="web/static",
	template_folder="web/templates"
);
socketio=SocketIO(
	app,
	async_mode='threading'#gevent???

)
#--------------------------------------------------------------------------------
@app.before_first_request
def activate_job():
	"""startupjob: todo trigger with requests"""
	def run_job():
		while True:
			print("Emitting...")
			socketio.emit(
				'log',
				{
					'data':'bg'
				},
				broadcast=True
			)
			con=sqlite3.connect("./db/a.db")
			cur=con.cursor()
			#cur.execute('create table if not exists buffer(ID INTEGER PRIMARY KEY AUTOINCREMENT,value text)')
			cur.execute('create table if not exists buffer(id integer primary key autoincrement,value text)')
			con.commit()
			batch=[]
			cur.execute('delete from buffer')
			con.commit()
			for a in range(1):
				batch.append(
					(
						json.dumps(
							{
								'time':datetime.datetime.now().isoformat(),
								'msg':'data',
								#'cpu':math.sin(math.pi*(datetime.datetime.now().microsecond/1000000+datetime.datetime.now().second/60)),
								'cpu':round(\
                                    math.sin(\
                                        8*math.pi*(\
                                            datetime.datetime.now().second/60\
                                            +\
                                            datetime.datetime.now().microsecond/60000000\
                                        )\
                                    )/2+0.5,\
                                    8
                                ),\
								'cpu_stat':'cpu_stat'
							}
						),
					)
				)
			cur.executemany(
				"insert into buffer(value)values(?)",
				batch
			)
			con.commit()
			for row in cur.execute('select * from buffer limit 1'):
				socketio.emit(
					'log',
					{
						'data':row[1]
					},
					broadcast=True
				)
			time.sleep(0.05)
	thread=threading.Thread(target=run_job)
	thread.start()
@app.route('/')
def index():
	return render_template('index.html')
#--------------------------------------------------------------------------------
@socketio.on('connect')
def test_connect():
	print('socketio: connect')
	emit('log', {'data': 'Connected'})
@socketio.on('disconnect')
def test_disconnect():
	print('Client disconnected')
#--------------------------------------------------------------------------------
def main (args):
	"""
	main()
	"""
	assert(os.path.exists("web/static")),'no folder';
	assert(os.path.exists("web/templates")),'no folder';
	socketio.run(
		app,
		host='0.0.0.0',
		port=5000
	)
	return 0;
#--------------------------------------------------------------------------------
if __name__ == "__main__":
	import sys;
	sys.exit(main(sys.argv));
	sys.exit(0);
#--------------------------------------------------------------------------------

