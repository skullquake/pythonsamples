━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
 
Incus Data   
Codi Matters
2019-10-07
by-nc-sa
Python
  

Whiteboard

Welcome ‖ Python Course Notes ‖ Python Course Code

Tuesday

 for i in range(200):
    print(i)
    break
 for in range(200):
    print(i)
    if i % 70 == 0:
       break
 for i in ragne(200):
    print(i)
    continue

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

 d = { "XYZ": 123, "JKL": 212, "ABC":324, "MNO": 321 }
 for k in d:
    print(k)
 print("-" * 20)
 for k in sorted(d):
    print(k)
 for k in sorted(d):
    print(k, d[k])
 #----
 slok = sorted(d)
 for k in slok:
    print(k, d[k])

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

 print(range(10))
 print(type(range(10)))
 l = list(range(10))
 print(l)
 for i in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:
    print(i)
 for i in range(10):
    print(i)
 for i in range(0, 10):
    print(i)
 for i in range(0, 10, 1):
    print(i)
 for i in range(10, 0, -1):
    print(i)
 l = [10, 11, 22, 33, 44, 55, 16, 17, 18, 19]
 for i in range(len(l)):
    print(i, l[i])
 
 for i, v in enumerate(l):
    print(i, v)
 
 i = 0
 for v in l:
    print(i, v)
    i += 1
 
 d = {'x': 1, 'y': 2, 'z': 3}
 print(list(d))
 print(list(d.keys()))
 print(list(d.items()))

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

 if 1 <= number and number <= 10: ...
 if 1 <= number <= 10: ...
 
 i = 5
 while i > 0:
    print(i)
    i += 1

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

 fruit = [
    ["Apples", 0.4],
    ["Pears",  0.5],
    ["Oranges", 1.92],
    ["Apricots", 8],
    ["Prunes", 12]
    ]
 for k in fruit:
    print(k, fruit[k])
 for k, v in fruit.items():
    print(k, v)
 for i in fruit.items():
    print(i[0], i[1])
 for k in fruit.keys():
    print(k, fruit[k])
 l = list(fruit.keys())

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

 fruit = [
    ["Apples", 0.4],
    ["Pears",  0.5],
    ["Oranges", 1.92],
    ["Apricots", 8],
    ["Prunes", 12]
    ]
 print("{} {}".format(fruit[0][0], fruit[0][1]))
 print("{} {}".format(fruit[1][0], fruit[1][1]))
 print("{} {}".format(fruit[2][0], fruit[2][1]))
 
 for i in range(len(fruit)):
    print("{} {}".format(fruit[i][0], fruit[i][1]))
 
 fruits = {
    "Apples"   : 0.4,
    "Pears"    :  0.5,
    "Oranges"  : 1.92,
    "Apricots" : 8,
    "Prunes"   : 12
    }
 
 for fruit, price in fruit.items():
    print("{} {}".format(fruit, price)
    print(f"{fruit} {price}"
 
 print(f"Price of Apples = {fruits["Apples"]}")
 print("Price of Apples = {price}".format(price=fruits["Apples"]))

Exercise — String Formatting Example

Write a ‘better’ version of this Listing 3-1 from ‘Beginning Python’ on pg.51:

listing_3-1.py — Listing 3-1 in Beginning Python

 # Print a formatted price list with a given width
 width = int(input('Please enter width: '))
 price_width = 10
 item_width  = width - price_width
 header_fmt = '{{:{}}}{{:>{}}}'.format(item_width, price_width)
 fmt        = '{{:{}}}{{:>{}.2f}}'.format(item_width, price_width)
 print('=' * width)
 print(header_fmt.format('Item', 'Price'))
 print('-' * width)
 print(fmt.format('Apples', 0.4))
 print(fmt.format('Pears', 0.5))
 print(fmt.format('Cantaloupes', 1.92))
 print(fmt.format('Dried Apricots (16 oz.)', 8))
 print(fmt.format('Prunes (4 lbs.)', 12))
 print('=' * width)

scraps.py — A Example Python Script for Experimentation

 #!/usr/bin/env python3
 # -*- coding: utf-8 -*-
 # vim: set ts=4 sw=4 et fenc=utf8 tw=88 cc=+1 :
 """
 Some Python snippets. Uses the ‘main’ pattern/convention.
 """
 
 from math import pi
 
 def main(args):
     """
     Place to test some Python snippets and syntax.
     """
     print(f"#args = {len(args)-1}")  #← prevent `pylint` warnings.
 
     #- implicit literal string concatenation.
     myvar = "ABC" "DEF"
     print(myvar)
 
     #- some formatting examples.
     print('|{0:<10.2f}|\n|{0:^10.2f}|\n|{0:>10.2f}|'.format(pi))
     print(f"|{pi:<10.2f}|", f"|{pi:^10.2f}|", f"|{pi:>10.2f}|", sep="\n")
 
     return 0  # ← ‘normal/success’ exit code.
 
 
 if __name__ == "__main__":
     import sys
 
     sys.exit(main(sys.argv))

 from math import pi
 print('|{0:<10.2f}|\n|{0:^10.2f}|\n|{0:>10.2f}|'.format(pi))
 print(f'|{pi:<10.2f}|", f"|{pi:^10.2f}|", f"|{pi:>10.2f}|", sep="\n")

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

 chcp 65001

Lists and Tuples

 print("Text {}, {}; {} ... {}".format(12, 3.45678, "Hello", "A"))
 print("Text {0}, {1}; {2} ... {3}".format(12, 3.45678, "Hello", "A"))
 print("Text {3}, {1}; {1}, {0}, {2}, {2}".format(12, 3.45678, "Hello", "A"))
 print("{0} {1} {0}".format("||", "ABC"))
 print("{one} {two} {three} {one}".format(three=123, one=2.5, two="ABC"))

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

 print("Text %d, %.2f; %s ... %c" % (12, 3.45678, "Hello", "A"))
 print("Text |%-10d|, |%8.2f|; |%10s| ... |%c|" % (12, 3.45678, "Hello", "A"))
 print("Text |%-10d|, |%8.2f|; |%10s| ... |%c|" % (123456, 3.45678, "Hello", "A"))
 print("Text |%-10d|, |%8.2f|; |%10s| ... |%c|" % (1234, 3.45678, "Hello", "A"))

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

 def to_int (arg, fail=None):
    """
    An exception-free “conversion” from a string to a `int`. Optionally,
    caller can specify what to return for invalid input (a default).
    """
    try:
       return int(s)
    except:
       return fail
 inp = input("Enter an integer: ")
 
 answer = 12 * to_int(inp, 1);

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

 l = list()
 l = []
 l = tuple()
 l = ()
 l = (1,)
 l = 1,

 l = list("ABCDE")
 l.append(['F', 'G', 'H'])
 print(l)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

 l = list("ABCDE")
 l[2:2] = "<X>"
 print(l)
 
 l = list("ABCDE")
 l[2:4] = []
 print(l)
 
 l = list("ABCDE")
 l[2:4] = list("XYZ")
 print(l)

Exercise

Make this ‘better’:

 # Prints a sentence in a centered "box" of correct width
 SCREEN_WIDTH = 80
 sentence = input("Sentence: ")
 text_width   = len(sentence)
 box_width    = text_width + 6
 left_margin  = (screen_width - box_width) // 2
 print()
 print(' ' * left_margin + '+'   + '-' * (box_width-2)  +   '+')
 print(' ' * left_margin + '| ' + '' * text_width
 print(' ' * left_margin + '| ' + sentence
 print(' ' * left_margin + '| ' + '' * text_width
 print(' ' * left_margin + '+' + '-' * (box_width-2) + '+') print()

Unicode line-drawing characters: │ ─ ┌ ┬ ┐ ├ ┼ ┤ └ ┴ ┘

Slice Syntax

list[start:end:step]
* start ⇒ by default: 0.
* end ⇒ by default: length of list; never included in result.
* end - start ⇒ number of items in result.
* step ⇒ by default: 1 (increment).

 from string import ascii_uppercase
 print(ascii_uppercase[1:10])
 print(ascii_uppercase[1:-16])
 print(ascii_uppercase[-25:-16])
 print(ascii_uppercase[-25:10])
 print(ascii_uppercase[1:10:1])
 print(ascii_uppercase[9:0:-1])
 a = [1, 2, 3, 4 ,5]
 b = a
 a[2] = "XXX"
 print(b)
 b = a[:]
 c = a[::-1]

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

 tag = '<a href="http://www.python.org">Python web site</a>'
 print(tag[9:30])
 print(month_name, ordinal, year)
 print("ABC" * 3)
 print("ABC" + "DEF")

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

 help(list)
 l = list()
 type([])
 l = [12, 34.5, "ABC", [ "DEF", 123 ]]

Stuff

ONI Guide

 print(type(123))
 print(type(1.23))
 print(type("ABC")
 print(type('DEF')
 print(str("ABC"))
 print(repr("ABC"))
 print(str('ABC'))
 print(repr('ABC'))

Windows Subsystem for Linux (WSL)

First off, use a PowerShell sesssion, which can be the default PowerShell that is installed with Windows.

To enable the use of WSL, run the following, after making some temporary directory your download directory with cd:

Enable WSL (PowerShell)

 Enable-WindowsOptionalFeature -Online `
    -FeatureName Microsoft-Windows-Subsystem-Linux

Then, to download an Ubuntu 18.04 (LTS) image from the Windows App store:

Download Ubuntu 18.04 (LTS) with PowerShell

 Invoke-WebRequest -Uri https://aka.ms/wsl-ubuntu-1608 `
    -OutFile ubuntu-1804.appx -UseBasicParsing

You can also use the built-in curl command:

Alternative Download Method

 curl.exe -L -o ubuntu-1804.appx https://aka.ms/wsl-ubuntu-1804

Now, you can install that ubuntu-1804.appx image with:

Install Ubuntu Image (PowerShell)

 Add-AppxPackage .\ubuntu-1804.appx

Once finished, you can run Ubuntu from the Start Menu, or the bash.exe executable (it's on your PATH).













© 2019 Incus Data (Pty) Ltd.   
Made with Pandoc, Source, Fira & Iosevka
