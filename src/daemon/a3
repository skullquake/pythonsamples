#!/usr/bin/python3
"""
daemon
"""
import atexit
import datetime
import os
import signal
import sys
import time
import syslog
#import schedule
import time


class Daemon(object):
    """
    daemon
    """
    def __init__(self, pid_file,stdout='/var/log/daemon_example_out.log',stderr='/var/log/daemon_example_err.log'):
        self.stdout = stdout
        self.stderr = stderr
        self.pid_file = pid_file

    def del_pid(self):
        """ del pid """
        os.remove(self.pid_file)

    def daemonize(self):
        """ deamonize """
        if os.fork():
            sys.exit()
        os.chdir("/")
        os.setsid()
        os.umask(0)
        if os.fork():
            sys.exit()
        with open('/dev/null', 'r') as dev_null:
            os.dup2(dev_null.fileno(), sys.stdin.fileno())
        sys.stderr.flush()
        with open(self.stderr, 'a+') as stderr:
            os.dup2(stderr.fileno(), sys.stderr.fileno())
        sys.stdout.flush()
        with open(self.stdout, 'a+') as stdout:
            os.dup2(stdout.fileno(), sys.stdout.fileno())
        atexit.register(self.del_pid)
        pid = str(os.getpid())
        with open(self.pid_file, 'w+') as pid_file:
            pid_file.write('{0}'.format(pid))

    def get_pid_by_file(self):
        """ Return the pid read from the pid file. """
        try:
            with open(self.pid_file, 'r') as pid_file:
                pid = int(pid_file.read().strip())
            return pid
        except IOError:
            return

    def start(self):
        """ start """
        print("Starting...")
        #syslog.syslog('Starting...')
        if self.get_pid_by_file():
            print('PID file {0} exists'.format(self.pid_file))
            sys.exit(1)
        else:
            print('PID file {0} not exists'.format(self.pid_file))

        self.daemonize()
        self.run()

    def stop(self):
        """ stop """
        print("Stopping...")
        syslog.syslog('Stopping...')
        pid = self.get_pid_by_file()
        if not pid:
            print("PID file {0} doesn't exist. Is the daemon not running?".format(self.pid_file))
            return
        try:
            while 1:
                os.kill(pid, signal.SIGTERM)
                time.sleep(0.1)
        except OSError as err:
            if 'No such process' in err.strerror and os.path.exists(self.pid_file):
                os.remove(self.pid_file)
            else:
                print(err)
                sys.exit(1)

    def restart(self):
        """ restart """
        self.stop()
        self.start()

    def run(self):
        """ loop """
        #schedule.every(10).seconds.do(self.job)
        while 1:
            schedule.run_pending()
            job()
            time.sleep(1)
    def job():
        syslog.syslog(syslog.LOG_INFO,datetime.datetime.now().isoformat() + '\n')

if __name__ == '__main__':
    """ ep """
    if len(sys.argv) < 2:
        print("Usage: {0} start|stop|restart".format(sys.argv[0]))
        sys.exit(2)
    daemon = Daemon('/tmp/dp3.pid')
    if 'start' == sys.argv[1]:
        daemon.start()
    elif 'stop' == sys.argv[1]:
        daemon.stop()
    elif 'restart' == sys.argv[1]:
        daemon.restart()
    else:
        print("Unknown command '{0}'".format(sys.argv[1]))
        sys.exit(2)
