#!/usr/bin/python3
# -*- coding: utf-8 -*-
# vim: ts=4 sw=4 et:
"""
This is documentation for the *module* (the whole file)
"""
import random
import math
from flask import\
        Flask,\
        render_template,\
        jsonify,\
        request\
;
import os;
assert(os.path.exists("web/static")),'no folder';
assert(os.path.exists("web/templates")),'no folder';
app=Flask(
    __name__,
    static_url_path="",
    static_folder="web/static",
    template_folder="web/templates"
);
@app.route('/a', methods=['GET', 'POST'])
def a():
    print("########################################")
    print(request.user_agent)
    print("########################################")
    ret=""
    pre=""
    h = to_int(request.args.get('h')) if request.args.get('h') else 8;
    c = request.args.get('c') if request.args.get('c') else "#";
    bg = "#"+request.args.get('bg') if request.args.get('bg') else "000000";
    fg = "#"+ request.args.get('fg') if request.args.get('fg') else "00FF00";
    b=True
    #assert(h >= 1), "Invalid width"
    if h==None or not(h >= 1):
        pre="Invalid height"
        b=False
    if not (len(c) == 1):
        pre="Invalid character: use single character"
        b=False
    #assert(len(c) == 1), "Invalid character: use single character"
    m=[]
    ml=None
    if b:
        w=h*2+1
        for a in range(h):
            ml=list()
            for b in range(w//2, 0, -1):
                ml.append(c if (a > b) else ' ')
            for b in range(w//2):
                ml.append(c if (a > b) else ' ')
            m.append(ml)
    if b:
        nrow=len(m)
        r=0
        g=0
        b=0
        ridx=0
        cidx=0
        for row in m:
            ncol=len(row)
            cidx=0
            for col in row:
                pre+=f"\x1b[38;2;{r};{g};{b}m"
                pre+=col
                pre+="\x1b[0m"
                r=math.floor(ridx/nrow*255)
                g=math.floor(cidx/ncol*255)
                b=math.floor(255-cidx/ncol*255)
                cidx+=1
            pre+='\n'
            ridx+=1
    if request.user_agent.string.upper().find("CURL")>=0:
        ret=pre
    else:
        pre2=''
        r=0;
        g=255;
        b=255;
        nrow=len(m)
        for row in m:
            ncol=len(row)
            ridx=0
            cidx=0
            for col in row:
                pre2+=f"<span style=\"color:rgba({r},{g},{b},1.0)\">{str(col)}</span>"
                r=ridx/nrow*255
                g=cidx/ncol*255
                b=255-cidx/ncol*255
                ridx+=1
                cidx+=1

            pre2+="<br/>"
        pre=pre2
        ret=f"""
<!DOCTYPE html>
<html>
    <head>
        <style>
            pre{{
                background:{bg}!important;
                color:{fg}!important;
            }}
            input.form-control{{
                border:unset;
                border-radius:unset;
                background:rgba(255,255,255,0.1)!important;
                color:rgba(255,255,255,0.5);

            }}
            input.form-control:hover{{
                background:rgba(255,255,255,0.2)!important;;
                color:rgba(255,255,255,0.6);
            }}
        </style>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
        <link rel="stylesheet" href="https://bootswatch.com/4/slate/bootstrap.css?cb=1234"></link>
    </head>
    <body>
        <div class="container">
            <pre>
                {pre}
            </pre>
            <form action ="/a" method="GET">
                <label for="h">Height</label>
                <input class="form-control" name="h" value="8"></input>
                <label for="h">Character</label>
                <input class="form-control" name="c" value="#"></input>
                <button type="submit" class="btn btn-primary">Submit</button>
            </form>
        </div>
        <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
    </body>
</html>
        """
    return ret


def main (args):
    """
    main() Needs more stuff here, in real life.
    """
    app.run();
    return 0;

def to_int(s, fail=None):
    """
    An exception-free "conversion" from a string to a "int". Optionally,
    caller can specify what to return for invalid input (a default).
    """
    try:
        return int(s)
    except:
        return fail


if __name__ == "__main__":
    import sys;
    sys.exit(main(sys.argv));
    sys.exit(0);
