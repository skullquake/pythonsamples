#!/usr/bin/python3
# -*- coding: utf-8 -*-
# vim: ts=4 sw=4 et:
"""
This is documentation for the *module* (the whole file)
"""
from flask import\
        Flask,\
        render_template,\
        jsonify,\
        request\
;
import os;
assert(os.path.exists("web/static")),'no folder';
assert(os.path.exists("web/templates")),'no folder';
app=Flask(
    __name__,
    static_url_path="",
    static_folder="web/static",
    template_folder="web/templates"
);
@app.route('/a', methods=['GET', 'POST'])
def a():
    ret=""
    h_pylint = to_int(request.args.get('h')) if request.args.get('h') else 8;
    c_pylint = request.args.get('c') if request.args.get('c') else "#";
    bg_pylint = "#"+request.args.get('bg') if request.args.get('bg') else "000000";
    fg_pylint = "#"+ request.args.get('fg') if request.args.get('fg') else "00FF00";
    #assert(h_pylint >= 1), "Invalid width"
    if h_pylint==None or not(h_pylint >= 1):
        ret="Invalid height"
        return ret
    if not (len(c_pylint) == 1):
        ret="Invalid character: use single character"
        return ret
    #assert(len(c_pylint) == 1), "Invalid character: use single character"
    w_pylint = h_pylint*2+1
    for a_pylint in range(h_pylint):
        for b_pylint in range(w_pylint//2, 0, -1):
            ret+=c_pylint if (a_pylint > b_pylint) else ' '
        for b_pylint in range(w_pylint//2):
            ret+=c_pylint if (a_pylint > b_pylint) else ' '
        ret+="\n"
    return f"""
<!DOCTYPE html>
<html>
    <head>
        <style>
            *{{
                background:{bg_pylint}!important;
                color:{fg_pylint}!important;
            }}
        </style>
    </head>
    <body>
        <pre>
            {ret}
        </pre>
    </body>
</html>
"""


def main (args):
    """
    main() Needs more stuff here, in real life.
    """
    app.run();
    return 0;

def to_int(s_pylint, fail=None):
    """
    An exception-free "conversion" from a string to a "int". Optionally,
    caller can specify what to return for invalid input (a default).
    """
    try:
        return int(s_pylint)
    except:
        return fail


if __name__ == "__main__":
    import sys;
    sys.exit(main(sys.argv));
    sys.exit(0);
